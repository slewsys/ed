# Makefile.am: Testsuite subdirectory automake template for the ed line editor.
#
# Process this file with automake to create Makefile.in.

AUTOTEST      = $(AUTOM4TE) --language=autotest
PACKAGE_M4    = package.m4
TESTSUITE     = testsuite
TESTSUITE_AT  = $(TESTSUITE).at
ED_SCRIPTSdir = $(srcdir)
@VALGRIND_CHECK_RULES@

# Templates for generating autotest .at scripts.
AT_PROTO_OK    = $(ED_SCRIPTSdir)/proto.ok-at.in
AT_PROTO_OK_CO = $(ED_SCRIPTSdir)/proto.ok-co-at.in
AT_PROTO_OK_EF = $(ED_SCRIPTSdir)/proto.ok-ef-at.in
AT_PROTO_OK_MF = $(ED_SCRIPTSdir)/proto.ok-mf-at.in
AT_PROTO_OK_R  = $(ED_SCRIPTSdir)/proto.ok-r-at.in
AT_PROTO_OK_SO = $(ED_SCRIPTSdir)/proto.ok-so-at.in
AT_PROTO_OK_XM = $(ED_SCRIPTSdir)/proto.ok-xm-at.in
AT_PROTO_ERR   = $(ED_SCRIPTSdir)/proto.err-at.in
AT_PROTO_FAIL  = $(ED_SCRIPTSdir)/proto.fail-at.in


SUFFIXES = .t .tco .tef .tmf .tr .tso .txm .err .ok-at .ok-co-at	      \
	   .ok-ef-at .ok-mf-at .ok-r-at .ok-so-at .ok-xm-at		      \
	   .err-at .fail-at

# The following GNU make rules generate a location-independent version
# of testsuite which is invoked from $(top_builddir) via:
#
#     $ make check
#
.t.ok-at:
	sed -e "s^@SCRIPT_NAME@^$*^g"					      \
	    -e "s^@SCRIPT_SRC@^$(abs_srcdir)/$*^g" "$(AT_PROTO_OK)"	      \
	    >"$@".tmp
	mv "$@".tmp "$@"

.tco.ok-co-at:
	sed -e "s^@SCRIPT_NAME@^$*^g"					      \
	    -e "s^@SCRIPT_SRC@^$(abs_srcdir)/$*^g" "$(AT_PROTO_OK_CO)"	      \
	    >"$@".tmp
	mv "$@".tmp "$@"

.tef.ok-ef-at:
	sed -e "s^@SCRIPT_NAME@^$*^g"					      \
	    -e "s^@SCRIPT_SRC@^$(abs_srcdir)/$*^g" "$(AT_PROTO_OK_EF)"	      \
	    >"$@".tmp
	mv "$@".tmp "$@"

.tmf.ok-mf-at:
	sed -e "s^@SCRIPT_NAME@^$*^g"					      \
	    -e "s^@SCRIPT_SRC@^$(abs_srcdir)/$*^g" "$(AT_PROTO_OK_MF)"	      \
	    >"$@".tmp
	mv "$@".tmp "$@"

.tr.ok-r-at:
	sed -e "s^@SCRIPT_NAME@^$*^g"					      \
	    -e "s^@SCRIPT_SRC@^$(abs_srcdir)/$*^g" "$(AT_PROTO_OK_R)"	      \
	    >"$@".tmp
	mv "$@".tmp "$@"

.tso.ok-so-at:
	sed -e "s^@SCRIPT_NAME@^$*^g"					      \
	    -e "s^@SCRIPT_SRC@^$(abs_srcdir)/$*^g" "$(AT_PROTO_OK_SO)"	      \
	    >"$@".tmp
	mv "$@".tmp "$@"

.txm.ok-xm-at:
	sed -e "s^@SCRIPT_NAME@^$*^g"					      \
	    -e "s^@SCRIPT_SRC@^$(abs_srcdir)/$*^g" "$(AT_PROTO_OK_XM)"	      \
	    >"$@".tmp
	mv "$@".tmp "$@"

.err.err-at:
	sed -e "s^@SCRIPT_NAME@^$*^g"					      \
	    -e "s^@SCRIPT_SRC@^$(abs_srcdir)/$*^g" "$(AT_PROTO_ERR)"	      \
	    >"$@".tmp
	mv "$@".tmp "$@"

.err.fail-at:
	sed -e "s^@SCRIPT_NAME@^$$(basename $*)^g"			      \
	    -e "s^@SCRIPT_SRC@^$(abs_srcdir)/$*^g" "$(AT_PROTO_FAIL)"	      \
	    >"$@".tmp
	mv "$@".tmp "$@"

# Ed scripts which should complete sucessfully.
ED_SCRIPTS_OK =								      \
	addr.t ascii.t a.t bang1.t c1.t c2.t comment.t delim.t		      \
	d.t e1.t e2.t e3.t e4.t e5.t g1.t g2.t g3.t g4.t g5.t g6.t	      \
	i1.t i2.t j.t k.t m.t nl1.t nl2.t nl3.t nl4.t q2.t		      \
	r1.t r2.t r3.t s1.t s2.t s3.t s4.t s5.t s6.t s7.t s8.t		      \
	t1.t t2.t u.t v1.t v2.t w.t

# Ed scripts tested for expected standard output.
ED_SCRIPTS_OK_CO =							      \
	sigpipe.tco

# Ed scripts which should complete sucessfully if external filter is available.
ED_SCRIPTS_OK_EF =							      \
	ef1.tef ef2.tef ef3.tef

# Ed scripts which should complete sucessfully if file globbing is available.
ED_SCRIPTS_OK_MF =							      \
	eg1.tmf eg2.tmf eg3.tmf

# Ed scripts which should complete sucessfully if registers are available.
ED_SCRIPTS_OK_R =							      \
	rmt1.tr rmt2.tr rmt3.tr

# Ed scripts tested for expected standard output.
ED_SCRIPTS_OK_SO =							      \
	p1.tso l1.tso n1.tso						      \
	zf1.tso zf2.tso zf3.tso zf4.tso zf5.tso zf6.tso zf7.tso		      \
	zb1.tso zb2.tso zb3.tso zb4.tso	zb5.tso zb6.tso	zb7.tso		      \
	zfh1.tso zfh2.tso zbh1.tso zbh2.tso

# Ed scripts which should complete sucessfully if macros are available.
ED_SCRIPTS_OK_XM =							      \
	mac1.txm mac2.txm mac3.txm

# Ed scripts which should complete, but with non-zero exit status.
ED_SCRIPTS_ERR =							      \
	a2.err addr1.err addr2.err bang1.err c1.err d.err		      \
	e1.err e2.err e3.err f1.err f2.err g1.err g2.err g3.err h.err	      \
	i2.err k2.err k3.err k4.err m.err q1.err r2.err s1.err s10.err	      \
	s3.err s4.err s5.err s6.err s7.err s8.err t1.err t2.err		      \
	u.err w1.err w2.err w3.err z.err

# Ed scripts which should fail.
ED_SCRIPTS_FAIL = $(ED_SCRIPTS_ERR)

ED_SCRIPTS_DATA = $(wildcard *.d)

ED_SCRIPTS_DATA_COMPRESSED = $(wildcard *.d.zst)

ED_SCRIPTS_RESULTS = $(wildcard *.r)

ED_SCRIPTS_RESULTS_COMPRESSED = $(wildcard *.r.zst)

ED_SCRIPTS_RESULTS_PIPED = $(wildcard *.rr)

# Autotest .at scripts generated by embedding an ed script in a
# corresponding autotest template (cf. $(TESTSUITE_AT) rule below).
AT_SCRIPTS_OK	   = $(ED_SCRIPTS_OK:.t=.ok-at)
AT_SCRIPTS_OK_CO   = $(ED_SCRIPTS_OK_CO:.tco=.ok-co-at)
AT_SCRIPTS_OK_EF   = $(ED_SCRIPTS_OK_EF:.tef=.ok-ef-at)
AT_SCRIPTS_OK_MF   = $(ED_SCRIPTS_OK_MF:.tmf=.ok-mf-at)
AT_SCRIPTS_OK_R	   = $(ED_SCRIPTS_OK_R:.tr=.ok-r-at)
AT_SCRIPTS_OK_SO   = $(ED_SCRIPTS_OK_SO:.tso=.ok-so-at)
AT_SCRIPTS_OK_XM   = $(ED_SCRIPTS_OK_XM:.txm=.ok-xm-at)
AT_SCRIPTS_ERR	   = $(ED_SCRIPTS_ERR:.err=.err-at)
AT_SCRIPTS_FAIL	   = $(ED_SCRIPTS_ERR:.err=.fail-at)

# Dynamically generated data.
AT_SCRIPTS_OK_CO_D = $(ED_SCRIPTS_OK_CO:.tco=.d)
AT_SCRIPTS_OK_SO_R = $(ED_SCRIPTS_OK_SO:.tso=.r)

EXTRA_DIST =								      \
	$(AT_PROTO_OK).in $(AT_PROTO_OK_CO) $(AT_PROTO_OK_EF)		      \
	$(AT_PROTO_OK_MF) $(AT_PROTO_OK_R) $(AT_PROTO_OK_SO).in		      \
	$(AT_PROTO_OK_XM) $(AT_PROTO_ERR) $(AT_PROTO_FAIL)		      \
	$(ED_SCRIPTS_OK) $(ED_SCRIPTS_OK_CO) $(ED_SCRIPTS_OK_EF)	      \
	$(ED_SCRIPTS_OK_MF) $(ED_SCRIPTS_OK_R) $(ED_SCRIPTS_OK_SO)	      \
	$(ED_SCRIPTS_OK_XM) $(ED_SCRIPTS_ERR) $(ED_SCRIPTS_FAIL)	      \
	$(ED_SCRIPTS_DATA) $(ED_SCRIPTS_DATA_COMPRESSED)		      \
	$(ED_SCRIPTS_RESULTS) $(ED_SCRIPTS_RESULTS_COMPRESSED)		      \
	$(ED_SCRIPTS_RESULTS_PIPED)

.PHONY: build-and-run-testsuite build-and-run-valgrind

check-local:
	rm -f $(abs_builddir)/ed
	if $(MAKE) --version 2>&1 | grep -q 'GNU Make'; then		      \
	  $(MAKE) $(AM_MAKEFLAGS) build-and-run-testsuite;		      \
	else								      \
	  if test _"$(GNU_MAKE_COMMAND)" != _''; then			      \
	    $(GNU_MAKE_COMMAND) $(AM_MAKEFLAGS) build-and-run-testsuite;      \
	  else								      \
	    echo "Running testsuite outside $$top_srcdir requires GNU Make."; \
	  fi;								      \
	fi

check-valgrind-local:
	rm -f $(abs_builddir)/ed
	if $(MAKE) --version 2>&1 | grep -q 'GNU Make'; then		      \
	  $(MAKE) $(AM_MAKEFLAGS) build-and-run-valgrind;		      \
	else								      \
	  if test _"$(GNU_MAKE_COMMAND)" != _''; then			      \
	    $(GNU_MAKE_COMMAND) $(AM_MAKEFLAGS) build-and-run-valgrind;	      \
	  else								      \
	    echo "Running valgrind outside $$top_srcdir requires GNU Make.";  \
	  fi;								      \
	fi

build-and-run-testsuite: atconfig ed $(TESTSUITE)
	$(abs_srcdir)/$(TESTSUITE)

build-and-run-valgrind: atconfig ed $(TESTSUITE)
	$(SED) -i -e "/^exec/s;';'$(VALGRIND)' $(VALGRIND_memcheck_FLAGS) ';" \
	    $(abs_builddir)/ed
	$(abs_srcdir)/$(TESTSUITE) -d
	find $(abs_builddir)/$(TESTSUITE).dir -name '*.log'		      \
	    | xargs -n30 grep 'lost'

$(TESTSUITE): $(TESTSUITE_AT) $(PACKAGE_M4)
	$(AUTOTEST) -I $(ED_SCRIPTSdir) "$@".at -o "$@".tmp
	mv "$@".tmp "$@"

$(TESTSUITE_AT): $(AT_SCRIPTS_OK) $(AT_SCRIPTS_OK_CO) $(AT_SCRIPTS_OK_EF)     \
		 $(AT_SCRIPTS_OK_MF) $(AT_SCRIPTS_OK_R) $(AT_SCRIPTS_OK_SO)   \
		 $(AT_SCRIPTS_OK_XM) $(AT_SCRIPTS_ERR) $(AT_SCRIPTS_FAIL)
	{								      \
	  echo 'AT_INIT';						      \
	  echo 'AT_TESTED([ed])';					      \
	} >"$@".tmp
	for scpt in $(AT_SCRIPTS_OK) $(AT_SCRIPTS_OK_CO)		      \
		    $(AT_SCRIPTS_OK_EF) $(AT_SCRIPTS_OK_MF)		      \
		    $(AT_SCRIPTS_OK_R)	$(AT_SCRIPTS_OK_SO)		      \
		    $(AT_SCRIPTS_OK_XM) $(AT_SCRIPTS_ERR)		      \
		    $(AT_SCRIPTS_FAIL); do				      \
	  echo "m4_include([$$scpt])";					      \
	done >>"$@".tmp
	mv "$@".tmp "$@"

$(PACKAGE_M4): $(top_srcdir)/configure.ac
	{								      \
	  echo '# Signature of the current package.';			      \
	  echo 'm4_define([AT_PACKAGE_NAME], [@PACKAGE_NAME@])';	      \
	  echo 'm4_define([AT_PACKAGE_TARNAME], [@PACKAGE_TARNAME@])';	      \
	  echo 'm4_define([AT_PACKAGE_VERSION], [@PACKAGE_VERSION@])';	      \
	  echo 'm4_define([AT_PACKAGE_STRING], [@PACKAGE_STRING@])';	      \
	  echo 'm4_define([AT_PACKAGE_BUGREPORT], [@PACKAGE_BUGREPORT@])';    \
	} >"$@".tmp
	mv "$@".tmp "$@"

install-data-am:
	@echo "Nothing to be done for 'install-data-am'"

clean-local:
	rm -rf *.ok-at *.ok-co-at *.ok-ef-at *.ok-mf-at *.ok-r-at	      \
	      *.ok-so-at *.ok-xm-at *.fail-at *.err-at *.log *.dir tmpwrk*
	rm -f $(PACKAGE_M4) $(TESTSUITE_AT) $(TESTSUITE)
	rm -f $(AT_SCRIPTS_OK_CO_D) $(AT_SCRIPTS_OK_SO_R)

distclean-local: clean-local
	rm -f Makefile atconfig ed proto.ok-at.in proto.ok-so-at.in
